#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1000  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 10    // default: 10

// Autoshift Macro
#define AS(keycode) &as LS(keycode) keycode     

// Layer definitions
#define BASE 0
#define SYM 1
#define FNC 2
#define MOUSE 3
#define SETTINGS 4
// -----------------

&sk {
	// don't release mods on other mods presses
	ignore-modifiers;
};

/ {
	behaviors {
		// Enables holding the first mod-tap key
		// by performing a tap-release-hold sequence.
		// To use it: "&qt KEYCODE1 KEYCODE2"
		qt: quick_tap {
			compatible = "zmk,behavior-hold-tap";
			label = "QUICK_TAP";
			#binding-cells = <2>;
			flavor = "hold-preferred";
			tapping-term-ms = <200>;
			quick-tap-ms = <200>;
			bindings = <&kp>, <&kp>;
		};
		as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <255>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
		mmv: mouse_move {
            compatible = "zmk,behavior-input-two-axis";
            x-input-code = <INPUT_REL_X>;
            y-input-code = <INPUT_REL_Y>;
            time-to-max-speed-ms = <350>;
            acceleration-exponent = <1>;
        };
	};

	macros {
		// sometimes my device thinks a modifier is being held down
		// pressing all modifiers fixes it.
		unstick: unstick {
			label = "ZM_unstick";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp LSHIFT &kp RSHIFT &kp LCTRL &kp RCTRL &kp LALT &kp RALT &kp LGUI &kp RGUI>;
		};
	};

	combos {
		compatible = "zmk,combos";
		combo_mouse {
            timeout-ms = <200>;
			require-prior-idle-ms = <200>;
            key-positions = <30 33>; // both outer thumb keys are held
            bindings = <&mo MOUSE>;
        };

		combo_settings {
			timeout-ms = <200>;
			require-prior-idle-ms = <200>;
			key-positions = <30 31>; // both left thumb keys
			bindings = <&mo SETTINGS>;
		};

	    combo_esc {
        	timeout-ms = <200>;
			require-prior-idle-ms = <200>;
        	key-positions = <1 2>;  // W + F
        	bindings = <&kp ESC>;
    		};

		combo_caps_lock {
			timeout-ms = <200>;
			require-prior-idle-ms = <200>;
			key-positions = <2 3>;  // F + P
			bindings = <&kp CAPS>;
		};

		// Left thumb is 30
		combo_apos {
			timeout-ms = <200>;
			require-prior-idle-ms = <200>;
			key-positions = <18 19>;  // I + O
			bindings = <&kp APOS>;
		};

		combo_dqt {
			timeout-ms = <200>;
			require-prior-idle-ms = <200>;
			key-positions = <8 9>;  // Y + ;
			bindings = <&kp DQT>;
		};

		combo_undo {
			timeout-ms = <200>;
			require-prior-idle-ms = <200>;
			key-positions = <20 22>;  // Z + C
			// bindings = <&kp LC(Z)>; // Linux
			bindings = <&kp LG(Z)>; // MacOS
		};

		combo_save {
			timeout-ms = <200>;
			require-prior-idle-ms = <200>;
			key-positions = <20 23>;  // Z + D
			// bindings = <&kp LC(S)>; // Linux
			bindings = <&kp LG(S)>; // MacOS
		};

		combo_underscore {
			timeout-ms = <200>;
			require-prior-idle-ms = <350>;
			key-positions = <23 26>;  // D + H
			bindings = <&kp UNDERSCORE>;
		};

		combo_dash {
			timeout-ms = <200>;
			require-prior-idle-ms = <350>;
			key-positions = <13 16>;  // T + N
			bindings = <&kp MINUS>;
		};

		combo_tab {
			timeout-ms = <200>;
			require-prior-idle-ms = <350>;
			key-positions = <10 11>;  // A + R
			bindings = <&kp TAB>;
		};

		combo_shift {
			timeout-ms = <200>;
			require-prior-idle-ms = <200>;
			key-positions = <0 1>;  // Q + W
			bindings = <&kp LSHIFT>;
		};

		combo_ctrl {
			timeout-ms = <200>;
			require-prior-idle-ms = <200>;
			key-positions = <20 21>;  // Z + X
			bindings = <&kp LCTRL>;
		};

		combo_tilde {
			timeout-ms = <200>;
			require-prior-idle-ms = <300>;
			key-positions = <3 6>;  // P + L
			bindings = <&kp TILDE>;
		};
	};

	keymap {
		compatible = "zmk,keymap";
		default_layer {
			label = "Base";
			bindings = <
			AS(Q)   AS(W)   AS(F)   AS(P)   AS(B)          AS(J)   AS(L)   AS(U)   AS(Y)   AS(SEMI)
			AS(A)   AS(R)   AS(S)   AS(T)   AS(G)          AS(M)   AS(N)   AS(E)   AS(I)   AS(O)
			AS(Z)   AS(X)   AS(C)   AS(D)   AS(V)          AS(K)   AS(H)   AS(COMMA) AS(DOT) AS(SLASH)
							&lt SYM DEL &kp BSPC          &kp SPACE &lt FNC ENTER
			>;
		};
		//LC Linux to LG MacOS
		sym {
			label = "Sym.";
			bindings = <
			&kp LG(X) &kp EXCL &kp LPAR &kp RPAR &kp BSLH		    &kp SLASH &kp N7 &kp N8 &kp N9 &kp KP_MINUS
			&kp LG(C) &kp LG(V) &kp LBRC &kp RBRC &kp HASH          &kp ASTRK AS(N4) AS(N5) &kp N6 &kp KP_PLUS
			&kp CARET &kp AMPS &kp LBKT &kp RBKT &kp PIPE 	        &kp DOT &kp N1 AS(N2) &kp N3 &kp KP_EQUAL
											&none &none       &kp RET &kp N0
			>;
		};

        fnc {
            label = "Function";
            bindings = <
            &kp HOME  &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP  &kp PG_UP       &kp LALT   &kp F7    &kp F8   &kp F9   &kp F10
            &kp LGUI  &kp LEFT    &kp UP        &kp RIGHT     &kp C_PP       &kp LSHFT &kp F4    &kp F5   &kp F6   &kp F11
            &kp PSCRN &kp K_PREV     &kp DOWN      &kp K_NEXT      &kp PG_DN         &kp LG  &kp F1    &kp F2   &kp F3   &kp F12
                                &none   &kp LC(BSPC)          &none   &none
            >;
        };

		mouse {
            label = "Mouse";
            bindings = <
            &none     &none      &none      &msc SCRL_UP   &none       &none     &msc SCRL_LEFT  &msc SCRL_RIGHT  &none     &none
            &none     &mmv MOVE_LEFT  &mmv MOVE_UP  &mmv MOVE_RIGHT  &none    &none     &mkp LCLK  &mkp RCLK  &none     &none
            &none     &none      &mmv MOVE_DOWN  &msc SCRL_DOWN  &none       &none     &mkp MB3  &mkp MB4  &mkp MB5  &none
                                &none      &none        &none     &none
            >;
        };

		settings {
				label = "Settings";
				bindings = <
				&bootloader &none &none &bt BT_CLR &bt BT_SEL 0               &bt BT_SEL 3 &none &unstick &none &bootloader 
				&none &none &none &none      &bt BT_SEL 1 						  &bt BT_SEL 4 &none &none &none &none
				&studio_unlock &none &none &none      &bt BT_SEL 2               &bt BT_SEL 5 &none &none &none &studio_unlock
										&none &none                         &none &none 
				>;
		};
	};
};
